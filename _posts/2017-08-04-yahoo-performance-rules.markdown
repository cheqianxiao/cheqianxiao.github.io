---
layout: post
title: 雅虎军规35条
header-img: other-bg.jpg
date:   2017-08-04 08:00:30 +0800
tags:  前端面试 
---

如何做前端性能优化？


* * *
原文： [Best Practices for Speeding Up Your Web Site](https://developer.yahoo.com/performance/rules.html)  
     
   
   
**减少http请求数**   

***

终端用户响应时间80%都是花费在前端，大部分时间都用在加载网页中的这些资源：图片、样式表、脚本、flash等，减少这些资源的数量从而最小化页面渲染所需http请求数。这是加快网页访问速度的关键。  

减少页面资源的一个方法是简化网页设计，我们是否能做一个内容丰富同时响应时间又短的网页呢？以下是一些在保持页面丰富度的前提下减少http请求的方法：  

* **文件合并**： 将js合并，将css合并，然而，在每个页面所需加载的
脚本和样式都不尽相同时，这种做法就有难度。 

* **css sprite**： 将多个背景图片合并进一张图片，设置`background-image ` `background-image ` 属性来显示不同部分。 

* **Image Maps**： 主要用于网页中的相邻图片，比如导航条。确定Image Maps中的坐标是一件繁琐又容易出错的事情。所以不推荐此方法。   

* **Inline images**： 使用data: URL scheme 将图片数据插入页面中，然而这样会使html文件变大，为了避免这个问题，可以将inline images放入（缓存在）样式表中。（注：inline images并没有被所有主流浏览器支持。）  

减少http请求是优化的第一步，这是提高首次访问性能最重要的指导思想。就像Tenni Theurer在他的博客 [Browser Cache Usage - Exposed!](https://yuiblog.com/blog/2007/01/04/performance-research-part-2/)中提到的，40-60%的日常访问用户是没有带缓存来访问你的网站的，加快页面首次响应速度是提升用户体验的关键。

**使用内容分发网络**  

***  

用户离服务器的距离会影响响应时间。将你的内容分开部署在多个地理分散的服务器上，用户将体验到更快的加载速度。但从哪开始呢？  

实现内容地理分散的第一步，是不要一开始就尝试将你的应用设计成分布式架构。改变架构意味着同时你可能要同步seesion 状态、跨服务器复制数据库。减少用户到内容之间的距离的尝试可以在应用架构之后，但绝不能被忽略。 

牢记一点： 80-90%的用户端响应时间都耗费在了下载图片、脚本、样式等资源上，这是**性能黄金准则**，而不是一开始就从重新设计应用架构这样有难度的事情开始。最好先将静态资源分发。这样不仅可以大大减少响应时间，而且，因为有了内容分发网络，这种做法也变得更简单。 

内容分发网络（CDN）是分散在不同地理位置高效地给用户分发内容的服务器的集合。The server selected for delivering content to a specific user is typically based on a measure of network proximity.用来给特定用户分发内容的服务器是基于一种网络策略。 F例如，通常会选择那些有最快网络或最快响应速度的服务器。or example, the server with the fewest network hops or the server with the quickest response time is chosen.  

一些大的互联网公司会有他们自己的CDN，但更节约成本的方式是使用CDN服务提供商，比如Akamai Technologies, EdgeCast, 或 level3。


对于创业公司或私人网站来说，CDN服务的成本会高得吓人。但是当你的访问者越来越多，越来越全球化。为了提高响应速度，CDN是必不可少的，At Yahoo!, properties that 将静态内容从应用服务器移到CDN (包括上面提到的第三方和雅虎自己的CDN) 将响应速度提高了20%甚至更多。切换到CDN是一个相对简单的将动态提高网站速度的代码更改。

**增加过期时间和缓存控制头**  

***

这条规则有两个方面：  

1. 对于静态资源：通过将设置Expires Header为一个“遥远的将来”来执行“永不过期”策略。  
2. 对于动态资源：通过设置合理的cache-control header来帮助浏览器实现有条件的请求。

网页变得越来越丰富，也意味着需要更多的样式、脚本、图片、flash，首次访问用户可能需要发送多个http请求，但是我们可以通过设置Expires Header来缓存这些资源，这样可以避免在后续的访问中增加不必要的请求，Expires Headers在图片中使用比较多，但是它应该被用在包括脚本、样式、flash在内的所有资源。  

浏览器（或代理）使用缓存来减少请求的数量和大小，使得网页加载更快。服务器通过http响应中的Expires Header响应头来告诉客户端资源的缓存时间。  

记住：当你使用“遥远将来”的过期头，当组件更新的时候你需要更改文件名。  

使用“遥远将来”的过期头可以优化非首次访问者的用户体验，对首次访问者无用，所以，性能优化的影响取决于用户事先缓存（缓存中已包含页面中的所有资源）情况下访问的频率，经过我们对Yahoo的测试，发现75-85%的访问是在有缓存的条件下发生的。通过设置一个“遥远将来”的过期头增加浏览器缓存的资源数，并在后续的访问中被重复利用，不需要发送一字节的数据。

**启用Gzip压缩**  

*** 
Gzip是目前最常用和高效的压缩方式，它是由GNU项目开发，在REC 1952被标准化，你可能会看到另一种压缩方式：deflate，它相对Gzip来说没有那么高效和常见。  

Gzip通常可以将响应大小减少70%，如果你是用Apache，配置Gzip的方式取决于你的版本，Apache 1.3用户使用mod_gzip，Apache 2.x用户使用mod_deflate。

对尽可能多的文件类型 开启Gzip是一种减小页面体积提升用户体验的简单方法。

**将样式文件放在最上面**  

通过研究Yahoo的性能，我们发现将样式表放在HEAD里可以让页面加载更快。这是因为将样式表放在HEAD里可以让页面逐步渲染。关注性能的前端工程师希望页面持续加载，也就是说，我们希望让浏览器尽可能快地将内容展现出来，这对于网络环境不好的用户浏览一个有很多内容的网站尤为重要。给予用户视觉反馈（比如，进度指示）的重要性经过了研究和documented。在我们的案例中HTML页面就是进度指示，当页面按顺序加载导航条、顶部logo等等，所有这些都为等待页面加载的用户提供了视觉反馈，这可以提升整体用户体验。

将样式表放在文档底部的问题在于： 在包括IE在内很多浏览器中，它阻止了顺序渲染。这些浏览器为了避免因样式表的变化导致的页面元素的重绘，而阻止了页面的渲染。这样用户就会长时间看到一个空白的页面。 

**HTML specification **明确指明样式表应包含在HEAD中： “和a标签不同，link标签只能出现在文档的head中，尽管它可以出现任意次数。”Neither of the alternatives, 页面空白或闪烁 are worth the risk，最好的方案是遵循HTML规范，将样式表放在文档head中。


**将脚本放在底部**  

脚本的问题在于他们阻塞了并行下载。HTTP/1.1 specification 建议不要在一个域名中并行加载超过两个资源，如果你将图片放在多个不同域名下，你会得到超过两个的并行下载数。当加载脚本的时候，浏览器不会再去开始任何下载，即使是在不同的域名。  

在某些情况下，将脚本放到文档底部并不容易，例如：脚本使用`document.write`来插入部分页面内容，它就不能被放在底部。还有作用域问题，多数情况下，都有这些场景对应的解决办法。

一个常被提到的替代方案是使用延迟加载的脚本，`defer`属性表示脚本中不包含任何`document.write`，浏览器可以根据这个属性来继续渲染。很不幸，火狐不支持这个属性，在IE中，可以做到延迟加载，但并不竟如人意，如果一个脚本可以延迟加载，那么它也可以被放到页面底部，这将是你的页面加载更快。

**避免使用css表达式** 

css expression一个很强大（也很危险）的用来动态设置css属性的方法,IE5开始支持这个方法，但是在IE8中被废弃，下面这个栗子，利用css表达式做到了每小时切换一次背景色：
    background-color: expression( (new Date()).getHours()%2 ? "#B8D4FF" : "#F08A00" );
像上面这样，`expression`可以接受一个js表达式，css属性设置成这个表达式的执行结果。这个`expression`会被其他浏览器忽略，所以可以通过用这个方法来设置IE中的属性，从而获得浏览器一致性用户体验。

css表达式的问题在于：它被计算的次数比大多数人预想的要频繁。它不仅在页面渲染和缩放的时候被计算，在页面滚动甚至当用户在页面上移动鼠标时，它也会被重新计算。在css 表达式中添加一个计数器可以帮助我们知道css表达式是在什么时候、怎样被计算的。在页面上随便移动一下鼠标就能轻易产生一万多次的计算。

一个可以减少css 表达式计算次数的方法是使用一次性表达式，表达式第一次计算的时候就将样式属性设置为一个确切的值。如果样式属性必须在页面的生命周期中被动态设定，可以使用添加事件来取代css表达式。如果你真的还是要使用css表达式，请记住：它们可能会被计算上千次，而这样会影响页面性能。

相关阅读：

[知乎]()

